<?xml version="1.0"?>
<!-- Entry point for using OpenNI2 devices -->
<launch>

  <!-- "camera" should uniquely identify the device. All topics are pushed down
       into the "camera" namespace, and it is prepended to tf frame ids. -->
  <arg name="camera" default="asusxtion" />
  <arg name="rgb_frame_id"   default="$(arg camera)_rgb_optical_frame" />
  <arg name="depth_frame_id" default="$(arg camera)_depth_optical_frame" />
  <arg name="robot" /> 

  <!-- device_id can have the following formats:
         "#1"  : the first device found
         "2@X" : the Xth device on USB bus 2 -->
  <arg name="device_id" default="#1" />

  <!-- By default, calibrations are stored to file://${ROS_HOME}/camera_info/${NAME}.yaml,
       where ${NAME} is of the form "[rgb|depth]_[serial#]", e.g. "depth_B00367707227042B".
       See camera_info_manager docs for calibration URL details. -->
  <arg name="rgb_camera_info_url"   default="" />
  <arg name="depth_camera_info_url" default="" />

  <!-- Hardware depth registration -->
  <arg name="depth_registration" default="false" />

  <!-- Driver parameters -->
  <arg name="color_depth_synchronization"     default="false" />
  <arg name="auto_exposure"                   default="true" />
  <arg name="auto_white_balance"              default="true" />

  <!-- Arguments for remapping all device namespaces -->
  <arg name="rgb"              default="rgb" />
  <arg name="ir"               default="ir" />
  <arg name="depth"            default="depth" />

  <!-- Optionally suppress loading the driver nodelet and/or publishing the default tf
       tree. Useful if you are playing back recorded raw data from a bag, or are
       supplying a more accurate tf tree from calibration. -->
  <arg name="load_driver" default="true" />
  <arg name="publish_tf" default="true" />
  <!-- Processing Modules -->
  <arg name="rgb_processing"                  default="true"  />
  <arg name="debayer_processing"              default="false" /> <!-- RGB cameras use a trio of filters to isolate the three color bands into a matrix of 4 pixel squares, where a square is  1 pixel red, 1 pixel blue and two pixels green. The files created during image acquisition (for instance, FITs or RAW files) are actually three sets of data, one for each color. Debayering is the process of melding  those three embedded color layers into a single "color" image.  -->
  <arg name="ir_processing"                   default="false" /> <!-- ir means infrared -->
  <arg name="depth_processing"                default="true" /> <!-- Given the raw depth image, rectifies it, converts both the raw and rectified images to metric format (uint16 -> float), and produces a pointcloud. Requires depth/image_raw. Produces depth/image_rect_raw (rectified), depth/image (metric), depth/image_rect (rectified, metric), depth/points (pointcloud). -->
  <arg name="depth_registered_processing"     default="true" /> <!-- Registration: matching depth to color - The depth and color images come from two separate, slightly offset, cameras, so they do not perfectly overlap. However, for each pixel in the depth image, we can calculate its position in 3D space and reproject it into the image plane of the RGB camera. In this way we build up a registered depth image, where each pixel is aligned with its counterpart in the RGB image. -->

  <arg name="disparity_processing"            default="false" /> <!-- Disparity map refers to the apparent pixel difference or motion between a pair of stereo image. To experience this, try closing one of your eyes and then rapidly close it while opening the other. Objects that are close to you will appear to jump a significant distance while objects further away will move very little. That motion is the disparity. In a pair of images derived from stereo cameras, you can measure the apparent motion in pixels for every point and make an intensity image out of the measurements. -->
  <arg name="disparity_registered_processing" default="false" />
                                                                                                                                                                1,1           Top
<arg name="hw_registered_processing"        default="true" if="$(arg depth_registration)" /> <!-- Enables the software registration pipeline. depth/image_rect_raw -> depth_registered/sw_registered/image_rect_raw (registered) -> depth_registered/points AND depth_registered/disparity. -->
  <arg name="sw_registered_processing"        default="false" if="$(arg depth_registration)" /> <!-- Enables the hardware registration pipeline. depth/image_raw -> depth_registered/hw_registered/image_rect_raw (rectified) -> depth_registered/points AND depth_registered/disparity. -->
  <arg name="hw_registered_processing"        default="false" unless="$(arg depth_registration)" />
  <arg name="sw_registered_processing"        default="true" unless="$(arg depth_registration)" />

  <!-- Disable bond topics by default -->
  <arg name="respawn" default="false" />

  <!-- Worker threads for the nodelet manager -->
  <arg name="num_worker_threads" default="4" />

  <!-- Push down all topics/nodelets into "camera" namespace -->
  <group ns="$(arg camera)">

          <!-- Start nodelet manager -->
          <arg name="manager" value="$(arg camera)_nodelet_manager" />
          <arg name="debug" default="false" /> <!-- Run manager in GDB? -->
          <include file="$(find rgbd_launch)/launch/includes/manager.launch.xml">
            <arg name="name" value="$(arg manager)" />
            <arg name="debug" value="$(arg debug)" />
            <arg name="num_worker_threads"  value="$(arg num_worker_threads)" />
          </include>

    <!-- Load driver -->
    <include if="$(arg load_driver)"
             file="$(find openni2_launch)/launch/includes/device.launch.xml">
      <arg name="manager"                         value="$(arg manager)" />
      <arg name="device_id"                       value="$(arg device_id)" />
      <arg name="rgb_frame_id"                    value="$(arg rgb_frame_id)" />
      <arg name="depth_frame_id"                  value="$(arg depth_frame_id)" />
      <arg name="rgb_camera_info_url"             value="$(arg rgb_camera_info_url)" />
      <arg name="depth_camera_info_url"           value="$(arg depth_camera_info_url)" />
      <arg name="rgb"                             value="$(arg rgb)" />
      <arg name="ir"                              value="$(arg ir)" />
      <arg name="depth"                           value="$(arg depth)" />
      <arg name="respawn"                         value="$(arg respawn)" />
      <arg name="depth_registration"              value="$(arg depth_registration)" />
      <arg name="color_depth_synchronization"     value="$(arg color_depth_synchronization)" />
      <arg name="auto_exposure"                   value="$(arg auto_exposure)" />
      <arg name="auto_white_balance"              value="$(arg auto_white_balance)" />
    </include>

 <!-- Load standard constellation of processing nodelets -->
    <include file="$(find rgbd_launch)/launch/includes/processing.launch.xml">
      <arg name="manager"                         value="$(arg manager)" />
      <arg name="rgb"                             value="$(arg rgb)" />
      <arg name="ir"                              value="$(arg ir)" />
      <arg name="depth"                           value="$(arg depth)" />
      <arg name="respawn"                         value="$(arg respawn)" />
      <arg name="rgb_processing"                  value="$(arg rgb_processing)" />
      <arg name="debayer_processing"              value="$(arg debayer_processing)" />
      <arg name="ir_processing"                   value="$(arg ir_processing)" />
      <arg name="depth_processing"                value="$(arg depth_processing)" />
      <arg name="depth_registered_processing"     value="$(arg depth_registered_processing)" />
      <arg name="disparity_processing"            value="$(arg disparity_processing)" />
      <arg name="disparity_registered_processing" value="$(arg disparity_registered_processing)" />
      <arg name="hw_registered_processing"        value="$(arg hw_registered_processing)" />
      <arg name="sw_registered_processing"        value="$(arg sw_registered_processing)" />
    </include>

  </group> <!-- camera -->

  <!-- Camera tf; either load it here or through URDF/SDF description -->
    <group if="$(arg publish_tf)">
      
  <!-- Load reasonable defaults for the relative pose between cameras -->
<!--      <arg name="pi/2" value="1.5707963267948966" />
      <arg name="optical_rotate" value="0 0 0 -$(arg pi/2) 0 -$(arg pi/2)" />

      <node pkg="tf" type="static_transform_publisher" name="$(arg camera)_base_link0"
        args="0 0 0 0 0 0  $(arg robot)/xtion_pro $(arg robot)/$(arg camera)_link 100" />
      <node pkg="tf" type="static_transform_publisher" name="$(arg camera)_base_link"
        args="0 -0.045  0 0 0 0  $(arg robot)/$(arg camera)_link $(arg robot)/$(arg camera)_depth_frame 100" />
      <node pkg="tf" type="static_transform_publisher" name="$(arg camera)_base_link1"
        args="0 -0.02 0 0 0 0  $(arg robot)/$(arg camera)_link $(arg robot)/$(arg camera)_rgb_frame 100" />
      <node pkg="tf" type="static_transform_publisher" name="$(arg camera)_base_link2"
        args="$(arg optical_rotate) $(arg robot)/$(arg camera)_depth_frame $(arg robot)/$(arg camera)_depth_optical_frame  100" />
      <node pkg="tf" type="static_transform_publisher" name="$(arg camera)_base_link3"
        args="$(arg optical_rotate) $(arg robot)/$(arg camera)_rgb_frame $(arg robot)/$(arg camera)_rgb_optical_frame 100" />
-->
    </group>

</launch>

