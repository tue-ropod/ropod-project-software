#! /usr/bin/env python

# System
import os

# ROS
import rospy
from sensor_msgs.msg import Image


class RGBDMonitor(object):
    """ Monitors the RGBD client. If no new messages are received for a certain period, a system command is issues
    killing the rgbd_to_ros node
    """
    def __init__(self, timeout):
        """ Constructor
        :param timeout: if no messages have been received for <timeout> seconds, the rgbd to ros converter is killed
        """
        self._last_stamp = None
        self._timeout = rospy.Duration(timeout)
        self._image_sub = rospy.Subscriber('/amigo/top_kinect/rgb/image', Image, self._image_callback)

    def update(self):
        """ Checks if an update has been received. Otherwise, it sends a system command to kill the node """
        # Don't check if no messages have been received
        if self._last_stamp is None:
            return

        duration = rospy.Time.now() - self._last_stamp
        if duration > self._timeout:
            rospy.logerr("No messages received for {} seconds, restarting rgbd_to_ros node".format(duration.to_sec()))
            os.system("rosnode kill /amigo/top_kinect/rgbd_to_ros")
            self._last_stamp = None

    def _image_callback(self, msg):
        """ Callback for messages. Stores the time at which the message is received
        :param msg: received message
        """
        rospy.logdebug("Receiving message")
        self._last_stamp = rospy.Time.now()


if __name__ == "__main__":

    rospy.init_node("rgbd_monitor")

    monitor = RGBDMonitor(timeout=1.0)

    rate = rospy.Rate(2.0)

    while not rospy.is_shutdown():
        monitor.update()
        rate.sleep()
