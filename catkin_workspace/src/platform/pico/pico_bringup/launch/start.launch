<?xml version="1.0"?>
<launch>
	<!-- Configurable Parameters -->
	<arg name="robotName" default="pico"/>   
	<arg name="laser" default="true"/>
	<arg name="laser1_name" value ="laser"/>
	<arg name="asus_cam" default="false"/> 
	<arg name="asus_cam_name" value="asusxtion"/>
	<arg name="asus_cam_calibration" default="false"/>
	<arg name="gmapping" default="false"/>
	<arg name="floorplan" default="$(find ropod_demo_dec_2017)/config/shape/floorplan_ropod_demo"/>

	<arg name="ROBOT_REAL" default="$(optenv ROBOT_REAL)" />
	<arg name="robot_path" default="$(env CATKIN_WORKSPACE)/src/platform/$(arg robotName)"/>
	<arg name="robot_bringup_path" default="$(arg robot_path)/$(arg robotName)_bringup"/>



	<group ns="$(arg robotName)">
		<!-- Start gmapping if required-->
		<group if="$(arg gmapping)">
			<include file="$(find robot_common)/launch/localization/gmapping.launch">
				<arg name="robot" value="$(arg robotName)" />
				<arg name="sensor" value="$(arg laser1_name)"/>
			</include>
		</group>
		
		<group if="$(arg ROBOT_REAL)">
	  	<!-- Do for both: Simulator and Real Robot -->
		
		<!-- Odometry publishing -->
			<node pkg="$(arg robotName)_base_controller" type="omnibase.py" name="odometry_publisher" output="screen">
				<param name="base_frame" value="$(arg robotName)/base_link"/>
				<param name="frame_id" value="$(arg robotName)/$(arg laser1_name)"/>
			</node>

			<!-- Laser publishing -->
			<group if="$(arg laser)">
				<include file="$(find robot_common)/launch/hardware/hokuyo_laser.launch">
					<arg name="bringup_path" value="$(arg robot_bringup_path)"/>
					<arg name="name" value="$(arg laser1_name)"/>
					<arg name="robot" value="$(arg robotName)"/>
				</include>
			</group>

			<!-- Asus RGBD camera -->
			<group if="$(arg asus_cam)">
				<include file="$(find robot_common)/launch/hardware/asusxtion.launch">
					<arg name="robot" value="$(arg robotName)" />
					<arg name="camera" value="$(arg asus_cam_name)"/>
					<arg name="rgb_camera_info_url"
					     value="file://$(find pico_bringup)/parameters/hardware/$(arg asus_cam_name)_calibration/rgb_PS1080_PrimeSense.yaml"/>
					<arg name="depth_camera_info_url"
					     value="file://$(find pico_bringup)/parameters/hardware/$(arg asus_cam_name)_calibration/depth_PS1080_PrimeSense.yaml" />
				</include>
			
				<arg name="urdf_file" default="$(find xacro)/xacro --inorder '$(find pico_model)/urdf/asus_camera_$(arg robotName).urdf'" />
				<param name="robot_description" command="$(arg urdf_file)" />
				<node pkg="robot_state_publisher" type="robot_state_publisher" name="rob_st_pub" />
			</group>	

			<!-- Specify transforms -->
			<include file="$(arg robot_bringup_path)/parameters/hardware/static_tf.launch">
				<arg name="robot" value="$(arg robotName)" />
				<arg name="laser1" value="$(arg laser1_name)"/>
				<arg name="depth_camera" value="$(arg asus_cam)"/>
				<arg name="depth_camera_name" value="$(arg asus_cam_name)"/>
				<arg name="calibration" value="$(arg asus_cam_calibration)"/>
			</include> 
		</group>	
	</group>

	<group unless="$(arg ROBOT_REAL)">
	<!-- SIMULATION -->  
	  
		<include file="$(find robot_common)/launch/simulator/gazebo_simulator.launch" >
			<arg name="robot" value="$(arg robotName)" />
			<arg name="model_path" value="$(arg robot_path)/$(arg robotName)_model" />
		</include>

		<!-- Add floorplan. -->
		<node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" 
			args="-file $(arg floorplan).urdf -urdf -z 1 -model floorplan -x -3 -y 0 -z 0" 
		/>

		<!-- Launch tf broadcaster for pico robot -->
		<node pkg="pico_bringup" type="tf_broadcaster_simulator" name="tf_broadcaster_simulator" />

		<!-- Launch RVIZ -->
		<include file="$(arg robot_bringup_path)/launch/tools/rviz.launch"/>
	</group>

</launch>
